# Librerías
library(tidyverse)   # Manipulación de datos: dplyr, tidyr, readr
library(janitor)     # Limpieza: clean_names(), tabyl()
library(ggplot2)     # Gráficos profesionales
library(kableExtra)  # Tablas formateadas para informes
library(skimr)       # EDA rápido y completo (skim())
library(GGally)      # ggpairs: matriz de gráficos para variables múltiples
install.packages("corrplot")
install.packages("GGally")
# Librerías
library(tidyverse)   # Manipulación de datos: dplyr, tidyr, readr
library(janitor)     # Limpieza: clean_names(), tabyl()
library(ggplot2)     # Gráficos profesionales
library(kableExtra)  # Tablas formateadas para informes
library(skimr)       # EDA rápido y completo (skim())
library(GGally)      # ggpairs: matriz de gráficos para variables múltiples
library(corrplot)    # visualización de matrices de correlación
library(vegan)       # funciones para análisis multivar (PCA/NMDS, si aplica)
library(broom)       # limpiar salidas estadísticas a data.frames
library(effectsize)  # tamaños de efecto
library(randomForest) # ejemplo de importancia de variables (opcional)
install.packages("randomForest")
# Librerías
library(tidyverse)   # Manipulación de datos: dplyr, tidyr, readr
library(janitor)     # Limpieza: clean_names(), tabyl()
library(ggplot2)     # Gráficos profesionales
library(kableExtra)  # Tablas formateadas para informes
library(skimr)       # EDA rápido y completo (skim())
library(GGally)      # ggpairs: matriz de gráficos para variables múltiples
library(corrplot)    # visualización de matrices de correlación
library(vegan)       # funciones para análisis multivar (PCA/NMDS, si aplica)
library(broom)       # limpiar salidas estadísticas a data.frames
library(effectsize)  # tamaños de efecto
library(randomForest) # ejemplo de importancia de variables (opcional)
#| label: data-load
# Carga de datos (ejemplo iris) y limpieza mínima
data("iris")
df <- as_tibble(iris) %>%
janitor::clean_names()   # convierte a snake_case: sepal_length, etc.
# Información básica
n_rows <- nrow(df); n_cols <- ncol(df)
glimpse(df)
skim(df)
#| label: data-load
# Carga de datos (ejemplo iris) y limpieza mínima
data("iris")
df <- as_tibble(iris) %>%
janitor::clean_names()   # convierte a snake_case: sepal_length, etc.
# Librerías
library(tidyverse)   # Manipulación de datos: dplyr, tidyr, readr
library(janitor)     # Limpieza: clean_names(), tabyl()
library(ggplot2)     # Gráficos profesionales
library(kableExtra)  # Tablas formateadas para informes
library(skimr)       # EDA rápido y completo (skim())
library(GGally)      # Matriz de gráficos para variables múltiples
library(corrplot)    # Visualización de matrices de correlación
library(knitr)       # Tablas en Quarto
#| label: data-load
# Carga de datos (ejemplo iris) y limpieza mínima
data("iris")
df <- as_tibble(iris) %>%
janitor::clean_names()   # convierte a snake_case: sepal_length, etc.
# Información básica
n_rows <- nrow(df); n_cols <- ncol(df)
glimpse(df)
skim(df)
#| label: ggpairs # Ver distribuciones y relaciones bivariadas
num_df <- df %>% select(where(is.numeric))
GGally::ggpairs(num_df, upper = list(continuous = wrap("cor", size = 3)))
#| label: skim-summary # Resumen compacto por variable para todo el dataset skim(df)
#| label: ggpairs # Ver distribuciones y relaciones bivariadas
num_df <- df %>% select(where(is.numeric))
GGally::ggpairs(num_df, upper = list(continuous = wrap("cor", size = 3)))
#| label: skim-summary # Resumen compacto por variable
skim(df)
#| label: ggpairs # Ver distribuciones y relaciones bivariadas
num_df <- df %>% select(where(is.numeric))
GGally::ggpairs(num_df, upper = list(continuous = wrap("cor", size = 3)))
#| label: ggpairs # Ver distribuciones y relaciones bivariadas
#| fig-cap: "Matriz de dispersión y correlación de las variables cuantitativas (Figura 1)."
num_df <- df %>% select(where(is.numeric))
GGally::ggpairs(num_df, upper = list(continuous = wrap("cor", size = 3)))
#| label: correlation
# Matriz de correlación y visual
cor_mat <- cor(num_df)
corrplot::corrplot(cor_mat, method = "color", type = "upper", addCoef.col = "black", number.cex = 0.8)
cor_mat_rounded <- round(cor_mat, 3)
cor_mat_rounded
#| label: univariate-loop
# Función para producir resumen + gráficos + texto para cada variable numérica
produce_univariate_report <- function(df, var, group = "species") {
var_sym <- sym(var)
# Resumen por grupo
tbl <- df %>%
group_by(!! sym(group)) %>%
summarise(
n = n(),
mean = mean(!! var_sym),
sd = sd(!! var_sym),
median = median(!! var_sym),
iqr = IQR(!! var_sym),
min = min(!! var_sym),
max = max(!! var_sym)
) %>% ungroup()
print(tbl %>% mutate_if(is.numeric, ~ round(., 3)) %>%
kable(caption = paste("Tabla: resumen de", var, "por", group)) %>%
kable_styling(full_width = FALSE))
# Histogram (global)
p_hist <- ggplot(df, aes_string(x = var, fill = group)) +
geom_histogram(bins = 20, alpha = 0.5, position = "identity", color = "grey40") +
labs(title = paste("Distribución de", var), subtitle = paste("N =", nrow(df)),
x = var, y = "Frecuencia") +
theme_minimal() + theme(plot.title = element_text(hjust = 0.5),
legend.position = "bottom", legend.justification = "center")
print(p_hist)
# Boxplot por grupo
p_box <- ggplot(df, aes_string(x = group, y = var, fill = group)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = mean, geom = "point", shape = 23, size = 2, color = "black") +
labs(title = paste(var, "por", group),
subtitle = "Caja = IQR; línea = mediana; rombo = media",
x = group, y = var) +
theme_minimal() + theme(legend.position = "none", plot.title = element_text(hjust = 0.5))
print(p_box)
# Texto interpretativo modelo (plantilla con valores)
# Tomamos los valores globales y los del primer grupo como ejemplo en texto
gl_mean <- mean(df[[var]])
gl_sd <- sd(df[[var]])
cat("\n")
cat(paste0("Interpretación estándar para variable '", var, "':\n"))
cat(paste0("- Media global = ", round(gl_mean,3), " (SD = ", round(gl_sd,3), ").\n"))
cat("- Resumen por grupo (ver tabla) debe considerarse para detectar asimetrías o grupos con varianza mayor.\n")
cat("- Si el boxplot muestra solapamiento entre cajas, la variable por sí sola no discrimina completamente entre grupos.\n")
cat("- Sugerencia de acción: si varianza heterogénea o outliers extremos, inspeccionar registros y aplicar transformaciones o tests robustos.\n\n"))
#| label: caja y bigotes
#| fig-cap: "Distribución de variables morfométricas en tres especies de Iris."
# Pasar el dataset a formato largo
iris_long <- df %>%
pivot_longer(cols = -Species,
names_to = "Variable",
values_to = "Valor")
#| label: caja y bigotes
#| fig-cap: "Distribución de variables morfométricas en tres especies de Iris."
# Pasar el dataset a formato largo
iris_long <- df %>%
pivot_longer(cols = -species,
names_to = "Variable",
values_to = "Valor")
# Gráfico unificado
ggplot(iris_long, aes(x = Species, y = Valor, fill = Species)) +
geom_boxplot(outlier.shape = 21, alpha = 0.7) +
facet_wrap(~ Variable, scales = "free_y") +
labs(
title = "Comparación de variables morfométricas en especies de Iris",
x = "Especie",
y = "Valor (cm)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none",
strip.text = element_text(face = "bold")
)
#| label: caja y bigotes
#| fig-cap: "Distribución de variables morfométricas en tres especies de Iris."
# Pasar el dataset a formato largo
iris_long <- df %>%
pivot_longer(cols = -species,
names_to = "Variable",
values_to = "Valor")
# Gráfico unificado
ggplot(iris_long, aes(x = species, y = Valor, fill = species)) +
geom_boxplot(outlier.shape = 21, alpha = 0.7) +
facet_wrap(~ Variable, scales = "free_y") +
labs(
title = "Comparación de variables morfométricas en especies de Iris",
x = "Especie",
y = "Valor (cm)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "none",
strip.text = element_text(face = "bold")
)
